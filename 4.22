第19章  两种典型的微处理器

    1、微处理器：集成计算机中央处理器（CPU）的所有组件在一个硅芯片上。诞生于1971年。
    
    2、第一个微处理器——Intel4004，其中有2300个晶体管。
    
    3、两个典型的微处理机（又称作“单芯片处理器”）：
          相同点：二者都是40管脚的集成电路，通过管脚提供对芯片的输入和输出点进行访问
          不同点：
              1、8080型号微处理机：是一个8位的微处理机，有6000个晶体管，时钟频率位2MHz,可寻址64KB的地址空间。
                （1）8080型号的芯片中40个管脚的作用：
                     ~管脚11连接-5伏电源；
                     ~管脚20连接+5伏电源；
                     ~管脚28连接+12伏电源；
                     ~管脚2接地（GND）;
                     ~管脚22和管脚15：提供两个不同的2MHz同步时钟输入信号让处理器工作；
                     ~输出信号：从芯片出来的单向箭头，这是由微处理器控制的信号，计算机中过的其余芯片对此做出；标号为A0~A15，具有寻址216即65536字节的存储空间的能力
                     ~输入信号：指向芯片的单向箭头，这是来自于其他芯片的信号，8080对他们做出响应；
                     ~既输入又输出信号：双向箭头；D0~D7数据信号，这些信号是在此芯片中仅有的几个既作为输入又作为输出的信号。
                （2）在8080中，指令长度可以是1个字节、2个字节或3个字节。(与第17章构造的计算机指令不同，第17章所有指令都是3个字节的，包括一个操作码和两个字节地址)。
                （3）8080中的8位累加器称作A，8080也有两条与装载和保存指令功能一样的指令，这两条指令的操作码为32h和3Ah，每个操作码后有一个16位地址。8080的助记符为STA（代表存
             储累加器的内容）和LDA（代表装载到累加器）。 
                （4）8080微处理器内部还包括6个寄存器，每个寄存器可以保存8位的值。
                （5）为什么要用寄存器？
                         答：许多计算机程序在同一时刻要用到几个数据，如果所有这些数据都存储在微处理器的寄存器中而非存储器中，执行程序将会更快，因为程序访问存储器的次数越少，
             那么它的运行速度也就越快。
                （6）MOV指令
                        定义：是8088指令中一个至少63个指令码供一条8080指令使用的指令，该条指令只有一个字节，用于把一个寄存器中的内容传送到另一个寄存器中（或同一个寄存器中）。
                        MOV操作码由8位组成：01dddsss，其中字母ddd代表指代“目的操作数”的3位代码，sss代表指代“源操作数”的3位代码。
                （7）把一个字节从存储器中装载到微处理器中，寻址存储器地址的方式：“
                         1、直接寻址方式：LDA指令把一个字节从“存储器————>累加器(A)”中，这个字节的16位地址直接跟在LDA操作码的后面。例如：LDA A，[aaaa]
                         2、间接寻址方式：MOV指令把一个字节从“存储器————>寄存器(B)”中，但被装载到寄存器中的字节的地址是保存在寄存器对HL中。例如：MOV B，[HL]
                               注意：HL寄存器是怎样得到16位存储器地址的呢？————用HL寻址的存储器地址也可以作为目的操作数
                         3、立即数寻址方式：指定的助记符为MVI。传送立即数指令占两个字节，第一个是操作码，第二个是1个字节的数据。此字节从"存储器————>寄存器"中或由HL寻址
                     的存储单元中.例如：MVI A，xx
                （8）8080标志位:
                         ~进位标志位CF、零标志位ZF、符号标志位SF、奇偶标志位PF、辅助进位标志位AF共5个。所有标志位都保存在另一个叫作程序状态字（PSW）的8位寄存器中。
                         注意：1、LDA、STA和MOV这样的指令不影响标志位，而ADD、SUB、ADC和SBB指令却要影响标志位。影响方式如下：
                                   •当运算结果最高位为1时，符号标志位SF为1，表示结果为负；符号标志位SF为0，表示结果为正。
                                   •当结果为0时，零标志位ZF为1。
                                   •当运算结果中“1”的个数为偶数时，奇偶标志位PF=1；当运算结果中“1”的个数为奇数时，奇偶标志位PF=0。
                                       PF有时用来粗略地检测错误，此标志位在8080程序中不常用。
                                   •当ADD或ADC运算产生进位或SUB与SBB运算不发生借位时，进位标志位CF=1。
                                   •当操作结果的低4位向高4位有进位时，辅助进位标志位AF=1。此标志位只用在DAA（十进制调整累加器）指令中。
                               2、直接影响"进位标志位CF"的两条指令：
                                      （1）"STC" 置CF为1
                                      （2）"CMC" CF取反
                 （9）8080逻辑运算:
                          基本的算数运算同第17章中的计算机原理类似，这里不做说明，仅对8080的逻辑运算做出说明。且算术运算和逻辑运算都可通过处理器的算术逻辑单元（ALU）来执行。
                          ~AND、XOR和OR指令按位运算，即逻辑操作只是单独地在对应位之间进行。
                 （10）8080 CMA指令：它对累加器中的值进行取反操作。每个0变为1，每个1变为0。
                       8080 DAA指令：帮助程序员用BCD码表示的数来进行十进制算术运算。（BCD码格式：每8位字节可存储两个十进制数字。）
                 （11）单字节指令INR和DCR可影响除CF外的所有标志位。
                 （12）8080也包含4个循环移位指令：
                            RLC 累加器循环左移：最高位（移出顶端）成为最低位（移进底端）
                            RRC 累加器循环右移：最低位（移出底端）成为最低位（移进顶端）
                            RAL 累加器带进位循环左移：把CF移入累加器的最低位，而把最高位移入CF中
                            RAR 累加器带进位循环右移：把CF移入累加器的最高位，而把最低位移入CF中
                  （13）堆栈：后进先出存储器。最后放入堆栈中的数据最先被取出，最先放入堆栈中的数据最后被取出。
                              push（压入）：向堆栈中放入数据
                              pop（弹出）：，从堆栈中取走数据     
                           例如:
                            如股输入值的顺序是：     
                                 PUSH A
                                 PUSH B
                                 PUSH C
                            那么取出值的顺序必是：
                                 POP C
                                 POP B
                                 POP A
                           
              2、6800型号微处理机：是一个8位的微处理机，有4000个晶体管，时钟频率经历了两个发展阶段（第一代1MHz;第二代1.5Mz和2MHz),可寻址64KB的地址空间。
              
  ****************************************************未完待续***************************************************************************************************************
                  
