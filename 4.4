1、计算机的本质：一堆电器实现复杂的各种东西，其主要内容就是逻辑门的使用。
2、常见的逻辑门：与门、或门、非门、与非门、或非门、异或门、同或门
        下面我们用“1”表示高电位状态；“0”表示低电位状态：
          （1）与门：所有输入条件同时为高电位（1）时，输出结果才会为高电位（1）
                                   与门真值表
                         条件A     条件B       结果F
                             0            0            0
                             0            1            0
                             1            0            0
                             1            1            1 
                  逻辑函数表示：F=A*B
          （2）或门：所有输入条件同时为低电位（0）时，输出结果才会为低电位（0）
                                      或门真值表
                         条件A     条件B       结果F
                             0            0            0
                             0            1            1
                             1            0            1
                             1            1            1 
                  逻辑函数表示：F=A+B
          （3）非门：逆转输入的高低
                               非门真值表
                         条件A            结果F
                             0                   1
                             1                   0
                  逻辑函数表示：F=A'
          （4）与非门：所有输入条件同时为高电位（1）时，输出结果才会为低电位（0）
                                   与非门真值表
                         条件A     条件B       结果F
                             0            0            1
                             0            1            1
                             1            0            1
                             1            1            0 
                  逻辑函数表示：F=(A*B)'
          （5）或非门：所有输入条件同时为低电位（0）时，输出结果才会为高电位（1）
                                   或非门真值表
                         条件A     条件B       结果F
                             0            0            1
                             0            1            0
                             1            0            0
                             1            1            0 
                  逻辑函数表示：F=(A+B)'
          （6）异或门：所有输入条件“输入状态不同”时输出结果为高电位（1）
                               所有输入条件“输入状态相同”时输出结果为低电位（0）
                                   异或门真值表
                         条件A     条件B       结果F
                             0            0            0
                             0            1            1
                             1            0            1
                             1            1            0 
                  逻辑函数表示：F=F=A'B + AB'
          （7）同或门： 所有输入条件“输入状态相同”时输出结果为低电位（1）
                                所有输入条件“输入状态不同”时输出结果为高电位（0）
                                   同或门真值表
                         条件A     条件B       结果F
                             0            0            1
                             0            1            0
                             1            0            0
                             1            1            1
                  逻辑函数表示：F= A*B + A'*B’
3、真值表求表达式例子： 
        假设某小学六年级一班男女生学生的期末成绩如下表所示：
              注意：
                        所有成绩均≥60分，该学生期末成绩显示优秀，
                        仅有一门成绩≥60分，该学生期末成绩显示及格
                        所有成绩均<60分，该学生期末成绩显示不及格，

                                               六年级一班男女生学生期末（成绩表）
              姓名（n）      语文（c）   数学（m）   英语（e）     结果（r）
                   小明             75               85                95             优秀               
                   小亮             75               58                55             及格          
                   小雷             55               54                58             不及格
                
                                              六年级一班男女生学生期末（成绩真值表）
              姓名（n）     语文（c）   数学（m）   英语（e ）       表达式(f)       结果（r）        
                   小明               1               1                1                f=c*m*e            优秀        
                   小亮               1               0                0                f=c+!m+!e        及格        
                   小雷               0               0                0                f=!c+!m+!e       不及格       
               注意：成绩≥60用“1”表示；成绩<60用“0”表示

4、加法：
     （1）计算机实现加法运算需要运用到“进位”
     （2）二进制加法在不考虑进位时等同于异或门计算，使用逻辑电路中的半加器。
                半加器：由两个输入（A和B）、一个结果输出（S）、一个进位输出（C）封装而成。A和B两个输入在加法中只表示单个位数的相加，如需实现n位相加就需要连接n个半加器
                全加器：由三个输入（A0、B0、Cin）、一个结果输出（S）、一个进位输出（C）封装而成。其本质可看成两个半加器、一个或门结合而成，第一个半加器的输出结果连接第二个半
            加器的输入A。
     （3）十进制加法中：
        例如现有十进制：
                数A           2  5  3
                数B    +      5  8  9
               进位            1   1
                            ——————————
               结果           8  4  2
     （4）二进制加法中：0+0=0、0+1=1、1+0=1、1+1=0（1进位到紧挨该位的高位）
        例如现有二进制：
                数A      1 0 1 0 0 0 0 1
                数B    + 1 0 0 0 1 1 0 1
               进位     1             1
                     ——————————————————————— 
               结果    1 0 0 1 0 1 1 1 0                               
5、减法
        （1）计算机实现减法运算需要运用到“借位”和“补码系统”，补码一定要知道最大值。
        （2）计算机中，反码就是对最大值求异或，补码是反码+1
        （3）十进制减法：
                一位十进制减法：在“一位十进制”中，补数（补码的最大值）为9；反码=补数（9）-减数
              
                      5-2=3
                      5+(-2)=         // “-2”的反码：9-2=7
                      5+(9-2)+1=
                      5+7+1=
                      5+8=13           //根据计算机的溢出特性，计算结果“13”的第二位（十位）将会被舍去，故结果跟“5-2”的结果一致，都是3
                      5+8=3

                两位十进制减法：在“两位十进制”中，补数（补码的最大值）为99；反码=补数（99）-减数
                      54-28=26
                      54+（-28）=           // “-28”的反码：99-28=71
                      54+（99-28）+1=
                      54+71+1=
                      54+72=126            //根据计算机的溢出特性，计算结果“126”的第三位（百位）将会被舍去，，故结果跟“54-28”的结果一致，都是26
                      54+72=26

         以此类推，三位十进制减法、四位十进制减法、n位十进制减法都是一样的计算步骤，只不过不同位数减法中的补数不一样（三位：999；四位：9999；n位：n个9）。
        （4）二进制减法：
                二进制减法中，一位二进制的补数（补码的最大值）是1；
                                       两位二进制的补数（补码的最大值）是11（十进制是3）；
                                       三位二进制的补数（补码的最大值）是111（十进制是7）；
                                       四位二进制的补数（补码的最大值）是1111（十进制是15）；
                                                         .................................
                                       八位二进制的补数（补码的最大值）是11111111（十进制是255）

                      1011-1001=0010
                      1011+（-1001）=    // “-1001”的反码：1111-1001=0110
                      1011+（1111-1001）+1=
                      1011+0110+1=
                      1011+0111=10010    //  //根据计算机的溢出特性，计算结果“10010”的第五位将会被舍去，，故结果跟“1011-1001”的结果一致，都是0010
                      1011+0111=0010







