第17章 自动操作
    1、8位自动加法机
          ~RAM阵列连接方式：1个16位的计数器控制RAM阵列的地址信号；RAM的数据输出信号应该代替累加器的开关组。
          ~工作流程：
               首先，闭合清零开关，清除锁存器的内容并把16位计数器的输出置为0000h，接着闭合RAM控制面板上的接管开关；
               你可以从RAM地址的0000h处开始输入一组想要加的8位数，如果有100个数，则它们保存在从0000h～0063h的地址中（也可以把RAM阵列中没有用到的单元都设置为00h）；
               然后断开RAM控制面板上的接管开关（这样控制面板不会再对RAM阵列起控制作用了），并断开清零开关。这时，你就只需坐着看灯泡的亮灭变化了。
            注意：1.在清零开关断开后，当时钟由0变为1时，将同时发生两个事件：锁存器保存来自加法器的结果；同时，16位计数器加1，指向RAM阵列的下一个地址
          ~存在问题：1.没有办法让它停止
                    2.只能用于加法，并且只能加8位数
                    
    2.如何实现“用自动加法器把50对数字加成50个不同的结果，且也希望有一个万能的机器来累加多对数字、10个数字或100个数字，并且希望所有的结果都可方便地使用”?
        答：把结果存回RAM阵列中，然后，在方便的时候用RAM控制面板来检查结果。这意味着连接在锁存器上的灯泡可以去掉。不过，锁存器的输出端必须连接到RAM阵列的数据输入端上，以便于
      和可以写入到RAM中
    
    3、自动加法器执行“加法指令”所作的工作：
          装载（Load）：从存储器中传送一个字节到累加器中
          加（Add）：把存储器中的一个字节加到累加器中
          保存（Store）：从累加器中取出结果，保存到存储器中
          停止（Halt）：最后，需要有一些方法使自动加法器停止工作
          
    4、如何实现“直接把存储器中的数装载到累加器中或者把累加器中的数保存到存储器中。且在所有事情都完成以后，我们还想让自动加法器停下来以便检查RAM阵列中的内容”？
         答：把这些代码存储在一个完全独立的RAM阵列中。这第二个RAM阵列与最初的RAM阵列同时被访问，但它存放的不是要加的数，而是用来表明自动加法器将要对最初的RAM阵列的相应地址进
       行某种操作的代码。
         注意：新的RAM阵列则只能通过控制面板来进行写入操作。
         
    5、指令码或操作码：RAM中的每个代码或者对应于数据RAM中一个要装入或加到累加器的数，或者表示一个要存回到存储器中的数。这样的数字代码称为指令码或操作码。它们“指示”电路执行某
 种“操作”。
    
    6、如何实现“从自动加法机电路中的累加器中减去一个数”？
          答：在执行加法指令的基础上，把数据RAM阵列的输出数据输入到加法器之前取反并且加法器的进位输入置1。
          
    7、自动加法机如何实现16位数的加法？
          答：两个方法：
              1.是连接两个8位加法器（或其他的两个部件），形成16位的设备。
              2.将两位16位数分为“高字节”和“低字节”两部分（每部分两位数），分别相加后将其结果相加。但需要注意的是此时“高字节”部分的结果与“低字节”部分的结果分别存储在存储器的不
          同地址中。
            补充：如果两位16位数在进行自动加法时出现进位，自动加法机如何操作？
                  ———— “低字节”部分相加产生进位，这个进位必须加到“高字节”部分的和中。
                  
    8、进位锁存器
         进位锁存器的使用引进了两个新的操作码：
             "进位加"指令（AddwithCarry）
                 ~执行8位数加法运算时，使用的是常规“加法”指令。加法器的进位输入为0；进位输出锁存在进位锁存器中
                 ~执行16位数加法运算时,"低字节加法运算"仍然使用常规“加法”指令来进行。加法器的进位输入为0，进位输出锁存到进位锁存器中;
                                       "高字节加法运算"使用新的"进位加"指令，加法器的进位输入使用进位锁存器的输出
             "借位减"指令（SubtractwithBorrow）
                 ~减法操作需要使减数取反且把加法器的进位输入置为1。
                 ~在进行16位数减法运算时，进位输出应保存在进位锁存器中。高字节相减时，进位锁存器的结果应作为加法器的进位输入
         注意：任何时候进行多字节数加法运算时，不管是否必要，都应该用进位加法指令计算。
         
     9、如何解决“一旦“保存”指令使某个数据保存在数据RAM中，这个数就不能再被装载到累加器中。”这个问题？
            答：改变之前每个操作码在存储器中所占字节的个数（“占1个字节”改为“占3个字节”）
                 第一个字节：存放代码本身
                 第二个字节与第三个字节：存放一个16位的存储单元地址
                     对于“装载”：地址指明数据在“数据RAM阵列”中的存储单元，该存储单元存放要装载到累加器中的字节；
                     对于“加法、减法、进位加法和借位减法”：地址指明要从累加器中加上或者减去的字节的存储单元；
                     对于“保存”：地址指明累加器中的内容将要保存的存储单元。
                     
     10、转移（Jump）
             改变固有的自动加法器“顺序寻址”RAM阵列模式，实现从RAM阵列的“某个特定地址”开始寻址。又称分支（branch）指令或者goto指令
            
     11、怎样才能让自动加法器完成两个8位数的"相乘"？例如，怎样才能得到像A7h乘以1Ch这样简单运算的结果？
             答： 人为计算处理：A7h × 1Ch = A7h + A7h + A7h +...+A7h(一共28个“A7h”)
                  自动加法器处理：1.可通过在新地址处接着输入27次这6个指令来实现；
                                 2.可在新地址处输入停止指令，然后按28次复位键来得到最终结果
                                 
     12、条件转移：转移指令在循环过程中只重复所需的次数
     
     13、零锁存器：8位加法器的输出全为0时它才锁存1
                   如果加法器输出全为0，则零标志位为1；若加法器输出不全为0，则零标志位为0。
                   
     14、计算机和计算器的区别：条件转移指令控制重复或循环
     
     15、计算机方面词汇：
             ~我们装配的计算机归类为数字计算机，因为它采用的是离散值。
              数字计算机有4个主要部分：处理器、存储器、至少一个输入设备和一个输出设备。
             ~数字计算机：
                 处理器：也叫中央处理器单元或CPU。
                         部分组件：累加器
                 存储器：是一个64KB的RAM阵列（注意：只有RAM阵列的地址的数据通路是16位的）
                 输入和输出设备：分别是RAM阵列控制面板上的几行开关和灯泡
             ~ALU：算术逻辑单元。由8位反向器和8位加法器构成。仅能进行算术运算，主要是加减法；在比较复杂的计算机中也可进行逻辑运算。
             ~程序计数器PCC：16位计数器
             ~计算机程序设计：采用一系列计算机指令使计算机进行两个数的乘法时，我们所做的工作就是计算机程序设计。
             ~机器码：又称机器语言。处理器可以响应的操作码。之所以用“语言”这个术语是因为机器码类似于可读/写的人类语言可被机器理解和响应
             ~：
